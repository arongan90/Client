4일차(CSS3 작성법 및 자바스크립트 개요,작성법)

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>css3 추가된 속성(1).html</title>
  <style>
      div {border:4px solid #aaaaaa;
	         border-radius:90px; /* 숫자가 커질수록 모서리의 둥근각도가 커짐*/
	         /* 오른쪽그림자크기,아래쪽그림자크기,흐림정도,색상    */
			 box-shadow:10px 10px 50px #666666;
			 padding:50px;/*테두리와 글자사이의 여백거리(안쪽)*/
		   }
  </style>
 </head>
 <body>
    <div>
	  <pre><!-- 게시판의 글내용보기 -->
         <h1>CSS3에서 스타일을 적용시킬때 브라우저별로 적용이 안된
		         경우가 있다.
		  접두어->Chrome,Opera,Safari->-webkit
		   IE기준->-ms
		   FireFox->-moz</h1>
	  </pre>
	</div>
 </body>
</html>
=====================================
 border-radius:90px; /* 숫자가 커질수록 모서리의 둥근각도가 커짐*/
	         /* 오른쪽그림자크기,아래쪽그림자크기,흐림정도,색상    */
 box-shadow:10px 10px 50px #666666;
=================================================
CSS3의 추가된 속성2(이미지의 크기)(2).html

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>CSS3의 추가된 속성2(이미지의 크기)(2).html</title>
  <style>
     body{
			background:url(../images/bg3.jpg);
			/*
             background-size:넓이 높이
			
			background-size:300px 200px;*/
            background-size:50% 50%;
			background-repeat:no-repeat;/*반복적으로 이미지 출력X*/
			padding-top:200px;
	 }
  </style>
 </head>
 <body><!-- <body bgcolor="yellow"> 색깔적용-->
  <div>
		<p>CSS3는 배경이미지에 관련된 속성이 추가
		 배경이미지를 불러올대 크기를 지정해서 불러올 수가 있다.</p>
  </div>
 </body>
</html>
====================================================
CSS3에서의 추가속성(3)(Text-Shadow)(3).html

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>CSS3에서의 추가속성(3)(Text-Shadow)(3).html</title>
  <style>
      h1 {text-shadow:4px 4px 10px #333333;
	      /* 수평(글자와 그림자사이의 거리),수직,흐림정도,색상 
		     chrome의 동작을 확인 -webkit 접두어추가해야 된다.
		  
		     animation-duration:작동시간(초)
			 animation-name:애니매이션 이름

			 @-webkit-keyframes 만들고자하는 애니매이션이름 { 기능}
		  */
		  -webkit-animation-duration:3s;
		  -webkit-animation-name:slidein;
	      }
    @-webkit-keyframes slidein {
       /* 동작 포인트를 지정*/

	   from{ /* 시작점*/
	        margin-left:100%;
			width:100%;/* 브라우저 의 폭 */
	   }
	   to{   /*종료지점 */
          margin-left:0%;
			width:100%;
	   }
	}
  </style>
 </head>
 <body>
  <h1>Text Shadow</h1>
   <p>
    CSS3에서는 text-shadow속성을 이용해서 문자에 그림자효과 부여가능,
	그림자를 만들때 수평/수직위치,흐림정도(번지는 효과),그림자색상을 지정가능
   </p>
 </body>
</html>
====================================================
4.자바스크립트언어의 특징(1).html

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>4.자바스크립트언어의 특징(1).html</title>
  <style type="text/css">
     /*
     여러줄 주석
	 */
  </style>
  <script>
   /*
      문자열을 표시=->" " 또는 ' ' 도 가능
	                    한글자 표시 '' ->'a'
						한글자 이상표시=>"ab"
   */
   //한줄 주석도 가능
   //형식) document.write("출력할 문장")
   document.write("<h1>자바스크립트 처음 실행문장</h1>");
   document.write("<h1>두번째 문장</h1>")";
  </script>
 </head>
 <body>
  <section>
     <header>자바스크립트 언어</header>
	 <article>
         <ol>
			<li>html문서내부에 작성(head태그 사이),body태그 사이</li>
			<li>문법에 맞게 내용을 작성(source file)->
			      컴파일(컴퓨터가 알아듣는 문장으로 변환)->
				  메모리에 올려서 실행(Run)</li>
		    <li>자바스크립트(소스파일)---컴파일X(에러체그 어려움)->실행</li>
            <li>함수형 언어로 구성(자바->메서드(method))</li>
			<li>플랫폼(운영체제)에 상관없이 다 실행이 된다.</li>
			<li>따로 자바스크립트파일로 만들어서 불러올수 있다.</li>
		 </ol>
	 </article>
  </section><!-- src="경로포함해서 불러올 파일명(~.js) -->
  <script src="myScript.js"></script>
 </body>
</html>
=============================================

5.변수의 개요 및 작성법(2).html

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>5.변수의 개요 및 작성법(2).html</title>
   <script>
      //형식) var 변수명(명사형)=저장할값
	  //자료형(=데이터형)->컴퓨터에게 문자,숫자인지 알려주고,저장되는 크기도
	  //                         같이 알려주는것(데이터의 종류와 크기를 지정해주는것)
	  //예약어->미리 컴퓨터 언어가 정해놓고 사용하는 단어
	  //var document="aaa"; 예약어는 사용불가

	  var age=23; //변수를 선언(공간을 만들어주는 것)
	                     //int age=23;
	  var name="홍길동"; //String name="홍길동"

      //중간에 변수의 값을 변경=>변수명=새로운값을 저장
      age=25;
      name="김길동";

      document.write("제 이름은"+name+"입니다.<br>");
      document.write("나이는"+age+"살입니다.<p>");//변수명+문자열을 결합(문자열 결합)
      
   </script>
 </head>
 <body>
    <ol>변수의 개요 및 특징
		<li>입출력 프로그램을 작성(입력을 받아서 출력해주는 프로그램)</li>
		<li>변수->사용자로부터 값을 입력(문자,숫자,논리적인값)받아서
		             저장하는 메모리 공간을 가리키는 말</li>
        <li>변수명을 줄때,대,소문자를 구분(name,Name,NAME)
		     주로 소문자로 사용한다.</li>
		<li>var 변수명(단어)=저장할값</li>
		<li>변수의 값은 중간에 값이 변경이 되면 변경된 값이 다시 저장이 된다.</li>
        <li>자바스크립트의 자료형은 저장되는값에 따라서 자동으로 저장이 된다.</li>
	    <li>변수를 작성->영문자+숫자+특수기호를 조합해서 작성(처음에 숫자시작X)</li>
	</ol>
 </body>
</html>
==================================================
6.연산자(산술,관계).html

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>6.연산자(산술,관계).html</title>
    <script>
      /*
        연산자(operator)=>연산(=계산)을 하기위한 기호

		1.산술연산자->+,-,*,/,%(나머지를 구해주는 연산자)
		                 3(항)+5(항)=8=>이항산술연산자
						 +5,-5 =>단항연산자(++,--)증감연산자
        2.관계연산자(=비교연산자) 4>5 =>>,>=,<,<=,
		   ==(서로 값이 같다.) !=(서로 같지 않다.)
		   5==5  5!=4
	  */
	</script>
 </head>
 <body>
   <script>
         document.write("산술,관계연산자<br>");
		 /*
            언제 변수를 사용해야 되느냐?

			1.입출력 프로그램을 작성할 필요가 있을때=>저장하기위해서
            2.계산할때 =>계산하는값을 저장할 필요
            3.현재 프로그램의 상태를 기억시킬 필요가 있을때
			  ex)그림판의 왼쪽버튼 클릭유무=>논리적인값 true, false
			  var mouseclick=false

			  if(마우스를 클릭했다면)
			     그림을 그려라

		 */
		 var res=20+30;//오른쪽의 연산자가 먼저 실행=>왼쪽에 값을 저장
		 document.write("res=>"+res+"<br>");//50
		 //-
         res=20-30;//오른쪽의 연산자가 먼저 실행=>왼쪽에 값을 저장
		 document.write("res=>"+res+"<br>");//-10
		 //*
         res=20*30;//오른쪽의 연산자가 먼저 실행=>왼쪽에 값을 저장
		 document.write("res=>"+res+"<br>");
		 // /
         res=90%30;//오른쪽의 연산자가 먼저 실행=>왼쪽에 값을 저장->
		 // %(나머지)
		 document.write("res=>"+res+"<br>");
         document.write("==============<p>");
		 //변수를 선언 it is=>it's
		 //형식) 여러개의 변수를 한꺼번에 선언해서 작성
		 //  ex) var 변수명=값,변수명2=값,변수명3=값,,,;
		 /*
		    "10"(문자열 상수) 10(숫자)
		 var a=10;
		 var b=5; */
		 var a=10,b=5;
		 var c=a>b;//10>5->true
		 document.write("c=>"+c+"<p>");//true
		 c=a==b;// =(대입연산자), ==(관계연산자)
		 document.write("after c=>"+c+"<p>");//false
		 c=a!=b;
         document.write("a!=b=>"+c);//true
   </script>
 </body>
</html>
============================================
  a+(산술)b
피연산자  피연산자(=항(계산을 할때 사용되는 대상자))

=======================================
<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>7.연산자(대입,논리)(4).html</title>
  <!-- 
     대입(=배정)연산자=>+=,-=,*=,/=
	                     자기자신의 변수에 값을 더하거나,빼거나,곱하거나,나누기를 할때
						 사용하는 연산자
						 ex) a=b+c
						       a=a+2;=>a+=2 (권장)=>실행속도가 빨라진다.
                               (산술연산자,대입연산자) (대입연산자 하나)
							   a=a-2;=>a-=2 //몸무게 줄이기
                               a=a*2=>a*=2;
							   a=a/2=>a/=2;
      논리연산자=>참과 거짓을 판별할 수 있는 연산자(true or false)
	                  and(&&)그리고  ,or(||)또는   !(=not)
					 T     T =T         T   T ->T       ! T=F    !F->T
					 T     F =F         T    F ->T
					 F     T=F          F    T->T
					 F     F =F         F    F->F
  -->
 </head>
 <body>
    <script>
        var a=10;
		//a=a+2;
		//+
		a+=2;
		document.write("a+=2=>"+a+"<p>");
		//-
		a-=2;
        document.write("a-=2=>"+a+"<p>");
        // *
        a*=2;
        document.write("a*=2=>"+a+"<p>");
		// /
        a/=2;
        document.write("a/=2=>"+a+"<p>");
		document.write("=========<p>");
		var su1=(2>5) && (5<7);//false && true=>false
		document.write("su1=>"+su1+"<br>");
		//
        var su2=(2>5) || (5<7);//false || true=>true
		document.write("su2=>"+su2+"<br>");//true
		document.write("(!su2)=>"+(!su2)+"<p>");//false
	</script>
 </body>
</html>
==============================================
8.함수(=메서드)의 개요 및 작성,사용법(5).html

<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>8.함수(=메서드)의 개요 및 작성,사용법(5).html</title>
  <!-- 
      회사(창업) 1인회사(홈페이지를 제작)
	  (=프로그램)=>프로그램의 중요요소(변수,연산자=>함수(=직원)

     1.어떤 기능을 가진 최소한의 작업단위
      (계산목적, 데이터 저장목적, 데이터조회,
       출력목적…)

	   함수생성(=회사의 직원선발->일을 시키는 경우)
       형식) function 함수이름(=직원이름)(업무지시(매개변수),,,){
                                                       함수가 처리해야할 값
           함수가 처리해야할 일(변수,연산자,제어문,,,,)
	   }
	   함수의 종류
	   1.매개변수 X, 반환값X =>단순하고 반복적인 일을 하는경우(정해진일만)
	                                  일일이 보고할 필요X
	   2.매개변수 O,반환값 O =>보고할 필요가 있는 직원(함수)
	   3.매개변수 O,반환값 X =>
  
       함수를 작성=>업무지시를 내림(=함수호출)
  -->
    <script>
         function print(){
			document.write("단순하고 반복적인일을 주로 담당<br>");
		 }
		 document.write("역시 반복적인 일을 합니다.<br>");
         //함수를 호출하는 문장=>형식) 함수명(); 함수명(매개변수~)
		 print()
		 print()
		 print()
		 print()
	</script>
 </head>
 <body>
  
 </body>
</html>

===============================================
   함수의 활용방법
<!doctype html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>7.연산자(대입,논리)(4).html</title>
  <!-- 
     대입(=배정)연산자=>+=,-=,*=,/=
	                     자기자신의 변수에 값을 더하거나,빼거나,곱하거나,나누기를 할때
						 사용하는 연산자
						 ex) a=b+c
						       a=a+2;=>a+=2 (권장)=>실행속도가 빨라진다.
                               (산술연산자,대입연산자) (대입연산자 하나)
							   a=a-2;=>a-=2 //몸무게 줄이기
                               a=a*2=>a*=2;
							   a=a/2=>a/=2;
      논리연산자=>참과 거짓을 판별할 수 있는 연산자(true or false)
	                  and(&&)그리고  ,or(||)또는   !(=not)
					 T     T =T         T   T ->T       ! T=F    !F->T
					 T     F =F         T    F ->T
					 F     T=F          F    T->T
					 F     F =F         F    F->F
  -->
 </head>
 <body>
    <script>
	function calcPrint(){ //함수명을 작성규칙->첫글자소문자 중간->대문자
        var a=10;
		//a=a+2;
		//+
		a+=2;
		document.write("a+=2=>"+a+"<p>");
		//-
		a-=2;
        document.write("a-=2=>"+a+"<p>");
        // *
        a*=2;
        document.write("a*=2=>"+a+"<p>");
		// /
        a/=2;
        document.write("a/=2=>"+a+"<p>");
		document.write("=========<p>");
		var su1=(2>5) && (5<7);//false && true=>false
		document.write("su1=>"+su1+"<br>");
		//
        var su2=(2>5) || (5<7);//false || true=>true
		document.write("su2=>"+su2+"<br>");//true
		document.write("(!su2)=>"+(!su2)+"<p>");//false
	}
    //함수를 사용하는 목적->단순하고 반복적인 구문=>중복배제,소스코드를 절약
	//                          개발시간이 단축
	calcPrint();
	calcPrint();

	</script>
 </body>
</html>



 제어문,함수 부분=>예습











